1..Net Core 9 ve C# kullanarak bir bankacılık uygulamasının kredilendirme projesini geliştireceğim. Bu projede Core,Persistence,Application,Domain ve WebApi katmanlarının olmasını istiyorum. Clean Architecture ve CQRS yaklaşımını kullanacağım. Core Katmanı çekirdek katman olacak. Burada yazdığım kodları diğer tüm projelerde kullanabilmeliyim. Boş bir solution oluştur ve ardından gerekli proje katmanlarını oluştur.

2.Domain katmanında sadece Entities klasörü olsun istiyorum.Bu klasör veritabanı varlıklarını barındıracak.Veri tabanı nesneleri Core katmanında oluşturacağımız  Repositories klasöründe base bir sınıftan -Entity- türesin.Bu base nesnede Id,CreatedDate,UpdatedDate,DeletedDate alanları olsun.Id alanı generic olmalı.Id alanı default bir değere sahip olmalı.Öncelikle bu temel nesneyi oluşturalım.Core Katmanı BankApp.Core olarak zaten mevcut.BankApp.Core altında sadece klasör ve entity yapılandırmasını yap

3.  Id için default değeri Entity nesnesinde oluştur.Sadece base entity nesnem var.ID değeri int,guid,string vs.olabilir. default! yapılandırması yap.


4.Domainde artık nesnelerimizi oluşturmaya başlayalım.Bu nesneler Entities klasörüne eklenmeli.Öncelikle müşteri yapımızla başlayalım.Bireysel ve kurumsal müşteri tiplerimiz olacak.Özellikleri kendin verebilirsin.

5.Nesnelerimize ait repository işlemleri için generic bir async repository arayüzü oluşturmanı istiyorum. Bu her nesne için kullanılabilmeli. EntityFrameworkCore kullanacağız. GetAsync, GetListAsync, AnyAsync,AddAsync,AddRangeAsync,UpdateAsync,UpdateRangeAsync,DeleteAsync,DeleteRangeAsync operasyonlarını içermeli. Listeleme operasyonları sayfalama destekli olmalı.Bu arayüzü Core Katmanında mevcut repositories klasörüne ekle

6.Şimdi bu arayüzler için EntityFrameworkCore implementasyonunu generic olarak yine mevcut Core/Repositories altına oluştur

7.Projemizde Persistence katmanına geçelim. Domain katmanında oluşturduğumuz IndividualCustomer ve CorporateCustomer nesneleri için Repository İmplementasyonlarını yapalım. Customer, IndividualCustomer ve CorporateCustomer arasındaki ilişki veritabanında da aynı şekilde tutuluyor. Kısacası üç tablomuz da mevcut. Bu sınıflar arasındaki ilişkileri dikkate al. Persistence katmanında DbContext için Contexts, Varlıklar arası ilşkileri ve özellikleri yönetmek için EntityConfigurations, Repository implementasyonu için ise Repositories klasörlerinde implementasyon yap. Clean Architecture gereği, repository arayüzlerinin application katmanında services/repositories altında olması gerektiğini unutma.

8.Application katmanında Features klasörü oluşturarak IndividualCustomer ve CorporateCustomer domain nesnelerimiz için alt klasörleme (çoğul isimlendirme) yaparak Commands, Queries, Constants, Profiles ve Rules klasörlerini oluştur. Ardından Command ve Query kodlarını yaz. Profiles klasörü AutoMapper konfigürasyonunu içermeli. Rules klasörü her nesne için iş kurallarının yazıldığı yer olmalı. Constants ise sabit değerlerimizi (örneğin mesajlar) içermelidir.